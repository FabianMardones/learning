@{
    ViewData["Title"] = "Home Page";
}

<h1>Intro Bootstrap</h1>

<hr />

<h2>1.- Contenedores</h2>

<h3>Ejemplo 1</h3>

<p>Hi My name is Fabián and I'm here looking for my dreams and my future and desired job.'</p>

<!-- En los containers se refiere a lo "responsive de un sitio" y en este caso a los Break Points.
Cuando uno edita un css por si mismo, se les llama media query, pero en
bootstrap, esto se logra con las medidas sm, md, lg, cl y xxl, osea desde la pantalla}
más pequeña, hasta la más grande, otorgando responsividad a todos los dispositivos.
-->

<hr />

<h2>2.-Sistema Grid</h2>


<!--Bootstrap nos ofrece un sistema que nos permite organizar en filas y columnas
    nuestros elementos de interfaz de usuario, conociéndose como el sistema grid
-->

<h4>Ejemplo: Horizontal</h4>

<div class="row">
    <div class="col-3">
        columna 1
    </div>
    <div class="col-3">
        columna 2
    </div>
    <div class="col-3">
        columna 3
    </div>
    <div class="col-3">
        columna 4
    </div>
</div>

<div class="row">
    <div class="col-3">
        columna 1
    </div>
    <div class="col-6">
        columna 2
    </div>
    <div class="col-3">
        columna 3
    </div>
</div>

<!--Definimos la clase row y dentro de ella la clase col para formas las columnas necesarias,
    siendo un máximo de 12 columnas y de igual forma puedo usar cada espacio del disponible
    respecto a una columna, para sumarla dentro de otra que quiero hacerla más grande.
    por ejemplo si tengo 12 espacios para columnas pero sólo necesito 3 que ocupen todo el espacio disponible,
    puedo utilizar col-4 en cada una, para llegar a las 3 columnas que necesito pero ocupando los 12 espacios.

-->

<h4>Ejemplo: Vertical</h4>

<div class="row">
    <div class="col-sm-4">
        columna 1
    </div>
    <div class="col-sm-4">
        columna 2
    </div>
    <div class="col-sm-4">
        columna 3
    </div>
</div>
<hr/>

<!--Con este ejemplo. logramos que en pantallas más pequeñas, las columnas
    ya no se observen en filas si no que de manera vertical.
-->


<h2>3.-Columnas</h2>

<h4>Ejemplo: Alineando las filas</h4>


<div class="row align-items-center">
    <div class="col">
        columna 1
    </div>
    <div class="col">
        columna 2
    </div>
    <div class="col">
        columna 3
    </div>
</div>

<!--el contenido de las columnas automáticamente se posicionan en la parte
    superior izquierda, entonces para poder ponerlo en otro lugar se utiliza
    la clase align-items-(center,start,end), en este ejemplo el contenido de las
    columnas, se encuentra centralizado dentro de la fila.
-->

<div class="row align-items-end">
    <div class="col">
        columna 1
    </div>
    <div class="col">
        columna 2
    </div>
    <div class="col">
        columna 3
    </div>
</div>


<!--Luego tenemos el posicionamiento al final de la clase row.-->


<div class="row align-items-start">
    <div class="col">
        columna 1
    </div>
    <div class="col">
        columna 2
    </div>
    <div class="col">
        columna 3
    </div>
</div>

<!--Y la posición start que viene por defento ubicada en la parte superior
    en este caso de la clase row.
.-->

<h4>Ejemplo: alineando las columnas horizontalmente</h4>

<!--Luego existe la posición para alinear las columnas horizontalmente en donde
    la clase col en este caso es la que se ve modificada, ya que en el caso anterior,
    era en el contenedor padre o "row" y en este caso utilizamos align-self-(start, center, end)
-->

<div class="row">
    <div class="col align-self-start">
        columna 1
    </div>
    <div class="col align-self-center">
        columna 2
    </div>
    <div class="col align-self-end">
        columna 3
    </div>
</div>

<!--Entonces como podemos ver, la columna 1 queda al inicio de la fila,
    la columna 2 al centro y la comlumna 3 al final. cada una ocupando la anchura
    permitida de los espacios disponibles como había mencionado anteriormente.
-->

<h4>Ejemplo: offset</h4> <!--es una característica de posicionamiento en donde no estoy boligado a tener mis columnas juntas, si no que también separadas.-->

<div class="row">
    <div class="col-4">
        columna 1
    </div>
    <div class="col-4 offset-4">
        columna 2
    </div>
</div>

<!--si yo quiero saltarme un espacio entre la columna anterior, puedo utilizar
    offset, y corre la cantidad de espacios disponibles hacia la derecha, utilizando
    un espacio de la izquierda.
-->

<h4>Ejemplo: Auto Margen</h4>

<div class="row">
    <div class="col-4">
        columna 1
    </div>
    <div class="col-4 ms-auto">
        columna 2
    </div>
</div>
<hr />

<!--además, no solamente debemos calcular cuánto espacio queremos entre columna y columna,
    también podemos utilizar el offset auto, que nos desplazará la columna hasta el otro lado
    del máximo espacio disponible, o más simple, lo mueve hacia el margen de la derecha,
    llamado automargen
-->

<h3>3.- Gutters</h3>

<h4>Ejemplo: Gutter Horizontal</h4>

<!--Además de utilizar offset para insertar espacios entre columnas podemos
    utilizar gutters. la diferencia está que con gutters, podemos utilizar 
    pequeños espacios para un separar elemento de otro elemento, es como 
    insertar padding entre cada uno de los elementos.
-->

<div class="row gx-sm-0 gx-md-3 gx-lg-5"> <!--Usamos un gx = gutter horizontal + el tamaño del espacio con un mínimo e 0 y máximo de 5-->
    <div class="col">  <!--Además se pueden agregar qué espacios quiero que se vean entre columnas según el tamaño de la pantalla utilizando la sintáxis gx-sm-0 y gx-md-3 y gx-lg-5 quedando los break points listos para distintas pantallas.-->
        <div class="bg-light border">
            columna 1
        </div>
    </div>
    <div class="col">
        <div class="bg-light border">
            columna 2
        </div>
    </div>
</div>


    <!--Em este ejemplo para notarlo, necesitamos un poco de color entonces
        se puede utilizar bg-light (bg = background-color) y además agregar bordes
        para que se aprecie aún más.
    -->


    <h4>Ejemplo: Gutter Vertical</h4>

    <!--Adicionalmente, para implementar la solución del gutter vertical, utilizamos el eje Y
        agregándolo al cntenedor padre row seguido de los break points.
    -->

<div class="row gx-sm-0 gx-md-3 gx-lg-5 gy-1">
    <div class="col-6">
        <div class="bg-light border">
            columna 1
        </div>
    </div>
    <div class="col-6">
        <div class="bg-light border">
            columna 2
        </div>
    </div>

    <div class="col-6">
        <div class="bg-light border">
            columna 3
        </div>
    </div>
    <div class="col-6">
        <div class="bg-light border">
            columna 4
        </div>
    </div>
</div>

|<!-- en los guttrs verticales, debemos adicionalmente modifical las columnas para ampliar su espacio
    En este ejemplo, quedan las columnas 1 y 2 ocupado todo el espacio disponible, separas según
    los break points de cada resolución de pantalla y a al estar dentro del mismo
    contenedor padre, pasan al siguiente salto de linea y ocupan el mismo espacio.
-->

    <h4>Ejemplo: Gutter Horizontal y Vertical</h4>

<div class="row g-3">
    <div class="col-6">
        <div class="bg-light border">
            columna 1
        </div>
    </div>
    <div class="col-6">
        <div class="bg-light border">
            columna 2
        </div>
    </div>

    <div class="col-6">
        <div class="bg-light border">
            columna 3
        </div>
    </div>
    <div class="col-6">
        <div class="bg-light border">
            columna 4
        </div>
    </div>
</div>

<!--Tal como en el ejemplo anterior, utilizamos la misma estructura sólo que en vez de usar
    en la clas row gx y gy sólo vamos a utilizar el g-(0,1,2,3,4,5) esto nos dará el mismo
    espaciado entre las columnas en el eje x y en el eje y
-->

    <hr />

<h3>4.-Manejando Imágenes</h3>

<!--debemos copiar el url de la imagen en este ejemplo y la aregamos como se agrega
    en un HTML y si quiero colocar varias imágenes puedo utilizar la siguiente estructura.
-->

<h4>Ejemplo: Imágenes en columnas</h4>

<div class="row">
    <div class="col-sm-3 gy-3">
        <img class="img-fluid" src="https://images.ecestaticos.com/3sWiINQpOb5zF2y5t4yxFIda1Sc=/0x0:1192x985/1200x900/filters:fill(white):format(jpg)/f.elconfidencial.com%2Foriginal%2Fe89%2F40b%2Fc9f%2Fe8940bc9fb77d292c4a11194c62dcf5b.jpg" />
    </div>
    <div class="col-sm-3 gy-3">
        <img class="img-fluid" src="https://images.ecestaticos.com/3sWiINQpOb5zF2y5t4yxFIda1Sc=/0x0:1192x985/1200x900/filters:fill(white):format(jpg)/f.elconfidencial.com%2Foriginal%2Fe89%2F40b%2Fc9f%2Fe8940bc9fb77d292c4a11194c62dcf5b.jpg" />
    </div>
    <div class="col-sm-3 gy-3">
        <img class="img-fluid" src="https://images.ecestaticos.com/3sWiINQpOb5zF2y5t4yxFIda1Sc=/0x0:1192x985/1200x900/filters:fill(white):format(jpg)/f.elconfidencial.com%2Foriginal%2Fe89%2F40b%2Fc9f%2Fe8940bc9fb77d292c4a11194c62dcf5b.jpg" />
    </div>
    <div class="col-sm-3 gy-3">
        <img class="img-fluid" src="https://images.ecestaticos.com/3sWiINQpOb5zF2y5t4yxFIda1Sc=/0x0:1192x985/1200x900/filters:fill(white):format(jpg)/f.elconfidencial.com%2Foriginal%2Fe89%2F40b%2Fc9f%2Fe8940bc9fb77d292c4a11194c62dcf5b.jpg" />
    </div>
</div>

<!--para redimensionar las fotos según los anchos de las columnas para que las imágenes
    se vean bien podemos usar una clase llamada img-fluid y esta la colocamos en la etiqueta img
-->

<!--Además para que las imágenes se ordenen de acuerdo a su espacio, sin importar si coloco las que quiera
    siempre respetando el máximo de espacios disponibles, puedo colocar sólamente col
-->

<!--Por otro lado para que cuando estemos en un dispositivo equeño y necesitemos que l
    las imágenes se coloquen de manera vertical, debemos incluir dentro de la clase col "col-sm-3"
    y en este caso si es necesario colocar el número de espacios que utilizará y para que queden 
    espaciadas entre una y otra, ya que así no más, quedan pegadas, entonces utilizamos gutters en su eje Y o vertical
-->


<h4>Ejemplo: Imagen tipo Thumbnail</h4>

<img class="img-thumbnail rounded-circle"
       src="https://m.media-amazon.com/images/M/MV5BNjg1MDQ5MjQ2N15BMl5BanBnXkFtZTYwNjI5NjA3._V1_.jpg" />

<!--En este caso, esta clase se coloca dentro de img y le da estilo, como un tipo margen 
    y adicionalmente la clase rounded-circle, hace que la img quede ovalada.
-->

<hr />

<h3>5.- colores</h3>

<!--Estos son los colores prederminados por bootstrap, hay muchos más pero nos enfocaremos en estos
    y crearemos un botón
-->

<div>
    <button class="btn-primary">Botón primario</button>
</div>

<div class="p-3 mb-2 bg-primary text-white">.bg-primary</div>
<div class="p-3 mb-2 bg-primary bg-gradient text-white">.bg-primary con gradiente</div>

<div class="p-3 mb-2 bg-secondary text-white">.bg-secondary</div>
<div class="p-3 mb-2 bg-secondary bg-gradient text-white">.bg-secondary con gradiente</div>

<div class="p-3 mb-2 bg-success text-white">.bg-success</div>
<div class="p-3 mb-2 bg-success bg-gradient text-white">.bg-success con gradiente</div>

<div class="p-3 mb-2 bg-danger text-white">.bg-danger</div>
<div class="p-3 mb-2 bg-danger bg-gradient text-white">.bg-danger con gradiente</div>

<div class="p-3 mb-2 bg-warning text-dark">.bg-warning</div>
<div class="p-3 mb-2 bg-warning bg-gradient text-white">.bg-warning con gradiente</div>

<div class="p-3 mb-2 bg-info text-dark">.bg-info</div>
<div class="p-3 mb-2 bg-info bg-gradient text-white">.bg-info con gradiente</div>

<div class="p-3 mb-2 bg-light text-dark">.bg-light</div>
<div class="p-3 mb-2 bg-light bg-gradient text-black">.bg-light con gradiente</div>

<div class="p-3 mb-2 bg-dark text-white">.bg-dark</div>
<div class="p-3 mb-2 bg-dark bg-gradient text-white">.bg-dark con gradiente</div>

<div class="p-3 mb-2 bg-white text-dark">.bg-white</div>
<div class="p-3 mb-2 bg-white bg-gradient text-black">.bg-white con gradiente</div>

<hr />

<h3>6.- tablas</h3>

<!--primero vamos a crear una tabla, con la estructura table, thead que es la cabecera,
    tr es la fila o table row y th que serían las celdas.
-->

<table>
    <thead>
        <tr>
            <th>#</th>
            <th>Nombre</th>
            <th>Apellido</th>
        </tr>
    </thead>
    <!--Luego vamos a trabajar con el cuerpo de la tabla, en donde se estructura como
        tbody, una fila tr y luego td que sería el contenido de cada elementro de las celdas.
    -->
    <tbody>
        <tr>
            <td>1</td>
            <td>Fabián</td>
            <td>Mardones</td>
        </tr>
        <tr>
            <td>2</td>
            <td>Dabiela</td>
            <td>Fredes</td>
        </tr>
        <tr>
            <td>3</td>
            <td colspan="2">León Mardones</td>
        </tr>
        <!--Utilizando colspan dentro de td o table data, podemos minimizar el código
            ya que en el ejemplo colspan="2" está reemplazando la siguiente fila
            pudiendo nosotros seguir completando los datos en una sola fila de código.
        -->
    </tbody>
</table>

<!--por una parte ya está estructurada la tabla, pero si queremos que tenga un diseño más estético
    podríamos agregar la clase table a la etiqueta table, entonces nos quedaría con diseño
    y estructurada.
-->
<table class="table table-striped table-hover table-sm">
    <!--Además si quiero conmbiar el color puedo colocar, table-striped-->
    <!--también puedo sombrear las filas cuando el cursor del mouse pase por encima
        de cada fila con table-hover-->
    <!--puedo agregar bordes a mi tabla con table-bordered y si la queremos sin bordes
        podemos utilizar, table-borderless-->
    <!--Por último, podemos hacer que la tabla ocupe menos espacio utilizando
        table-(breakpont) en este caso table-sm-->
        <thead>
        <tr>
            <th>#</th>
            <th>Nombre</th>
            <th>Apellido</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>1</td>
            <td>Fabián</td>
            <td>Mardones</td>
        </tr>
        <tr class="table-success">
            <!--si quiero cambiar el color de una fila por ejemplo para que aparezca como exitoso
                puedo usar table-(color) en este caso table-success-->
            <td>2</td>
            <td>Dabiela</td>
            <td>Fredes</td>
        </tr>
        <tr>
            <td>3</td>
            <td colspan="2">León Mardones</td>
        </tr>
    </tbody>
</table>

<hr />

<h3>7.- Manteniendo el Ratio de un video</h3>

<!--El ratio nos permite mantener las dimensiones de un elemento-->

<!--en el primer ejemplo, claro, el video se muestra en la pantalla, pero cuando esta se achica
    el video sigue igual de grande, manteniendo una dimensión constante por lo que
    en pantallas pequeñas provocaría el esta navegando hacia el lado para ver otros botones, etc.
-->
<div>
    sin ratio
</div>

<iframe width="560" height="315" src="https://www.youtube.com/embed/G9tScR87hGY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<!--Si usamos ratio, el tamaño del video cambiará dinámicamente según la dimensión del dispositivo
    del usuario, de una manera que no distorsione el video, creando un div que lo contenga
    y usando la clase ratio-16x9 en este ejemplo. el video en una pantalla de escritorio se verá más grande
    pero al adaptar a un dispositivo pequeño, quedará contenido en el ancho de la pantalla.
-->

<div>
    con ratio de 16x9 <!--Que es básicamente una pantalla ancha ancho*alto-->
</div>

<div class="ratio-16x9">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/G9tScR87hGY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>

<!--Al igual que con las imágener como en los ejemplos anteriores podemos hacer que un video
    quede uno arriba del otro en pantallas más pequeñas.
-->
<hr />

<div class="row gy-3">
    <div class="col-md-4">
        <div class="ratio-16x9">
            <iframe width="560" height="315" src="https://www.youtube.com/embed/G9tScR87hGY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        </div>
    </div>
    <div class="col-md-4">
        <div class="ratio-16x9">
             <iframe width="560" height="315" src="https://www.youtube.com/embed/G9tScR87hGY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        </div>
    </div>
    <div class="col-md-4">
        <div class="ratio-16x9">
            <iframe width="560" height="315" src="https://www.youtube.com/embed/G9tScR87hGY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        </div>
    </div>
</div>

<hr />

<h3>8.- Tamaños</h3>

<!--Bootstrap también nos ofrece unas clases para definir el tamaño de los elementos-->

<h4>Ejemplo: Anchura</h4>

<div class="w-25 p-3 bg-primary">Width 25%</div>
<div class="w-50 p-3 bg-secondary">Width 50%</div>
<div class="w-75 p-3 bg-primary">Width 75%</div>
<div class="w-100 p-3 bg-secondary">Width 100%</div>
<div class="w-auto p-3 bg-primary">Width auto%</div>

<h4>Ejemplo: Altura</h4>

<div style="height: 100px;" class="bg-info">
    <div class="h-25 d-inline-block bg-primary" style="width: 120px;">Height 25%</div>
    <div class="h-50 d-inline-block bg-secondary" style="width: 120px;">Height 50%</div>
    <div class="h-75 d-inline-block bg-primary" style="width: 120px;">Height 75%</div>
    <div class="h-100 d-inline-block bg-secondary" style="width: 120px;">Height 100%</div>
    <div class="h-auto d-inline-block bg-primary" style="width: 120px;">Height auto</div>
</div>

<h4>Ejemplo: Toda la pantalla</h4>

<!--
<div class="vw-100 bg-success">Width 100vw</div>
<div class="vh-100 bg-secondary">Width 100vh</div>
-->
<p>Está contenido en los comentarios</p>

<hr />


<h3>9.- Espacios</h3>

<h4>Ejemplo: Márgenes</h4>

<!--Para serpara filas o textos, podemos utilizar unas clases definidad por bootstrap para ello
    como por ejemplo mt-4 (margin-top) en la fila o texto que quiero separar separaía el elemento seleccionado
    con el elemento superior.
-->
<div>
    Fila 1
</div>
<div class="mt-4">
    Fila 2
</div>
<div>
    Fila 3
</div>

<hr />
<!--Por otro lado si busco darle un margen general a mi elemento seleccionado
    puedo simplemente colocar como en este ejemplo m-5 (margen: 5) y lo moverá 5 espacios
    en todas las direcciones
-->

<div>
    Fila 1
</div>
<div class="m-5">
    Fila 2
</div>
<div>
    Fila 3
</div>

<hr />

<!--en caso de darle un margen hacia abajo a mi elemento seleccionado
    puedo simplemente colocar como en este ejemplo mb-5 (margen: 5) y lo moverá 5 espacios
    5 espacios hacia arriba.
-->


<div>
    Fila 1
</div>
<div class="mb-5">
    Fila 2
</div>
<div>
    Fila 3
</div>

<hr />

<!--y si quiero darle un margen hacia arriba y hacia abajo a mi elemento seleccionado
    puedo colocar como en este ejemplo my-5 (margen arriba y abajo: 5) y el elemento superior 5 espacios
    5 espacios hacia arriba y el elemento inferior 5 espacios hacia abajo quedando el elemento seleccionado
    separados de ambos
-->

<div>
    Fila 1
</div>
<div class="my-5">
    Fila 2
</div>
<div>
    Fila 3
</div>

<hr />


<!--también podemos realizarlo con separaciones entre elementos y usaremos dos botones
En este caso puedo definir un margen hacia la derecha en el botón 2 con ms(margen Start)-->
<button class="btn btn-primary">Botón 1</button>
<button class="btn btn-secondary ms-5">Botón 2</button>

<hr />
<!--y si por el contrario quiero darle margen a la izquierda
En este caso puedo definir un margen hacia la izquierda en el botón 1 con me(margen End)-->

<button class="btn btn-primary me-5">Botón 1</button>
<button class="btn btn-secondary">Botón 2</button>

<!--Cabe recalcar que es lo mismo, sólo que el me sólo se debe colocar en un elemento a la izquierda
    y el ms sólo en un elemento a la derecha.
-->

<hr />
<!--Por otra parte podemos dar márgenes dentro de un mismo elemento como es con padding
    en este caso los bordes del botón se han alejado muchisimo del contenido del botón
    ya que el margin es hacia afuera y el padding es hacia dentro.
-->

<button class="btn btn-primary p-5">Botón 1</button>
<button class="btn btn-secondary ms-5">Botón 2</button>

<hr />

<!--también se puede utilizar un padding end o pe y esto hará que el margen derecho hacia el interno
-->
<button class="btn btn-primary pe-5">Botón 1</button>
<button class="btn btn-secondary ms-5">Botón 2</button>

<hr />

<!-- y también se puede utilizar un padding izquiera y derecha o px y esto hará
    que tengamos un margen interno a la izquierda y a la derecha
-->
<button class="btn btn-primary px-5">Botón 1</button>
<button class="btn btn-secondary ms-5">Botón 2</button>

<hr />

<h3>10.- Utilidades de texto</h3>

<!--Bootstrap nos da una serie de clases que nos sirven para trabajar con texto-->

<h4>Alineando texto</h4>

<p class="text-start">Texto a la izquierda</p>
<p class="text-center">Texto en el centro</p>
<p class="text-end">Texto a la derecha</p>

<!--Además, podemos utilizar los breakpoints para alnear según la anchura de la pantalla-->

<p class="text-sm-center">Texto centralizado en pantallas pequeñas o más grandes</p>
<p class="text-md-center">Texto centralizado en pantallas medias o más grandes</p>
<p class="text-lg-center">Texto centralizado en pantallas grandes o más grandes</p>
<p class="text-xl-center">Texto centralizado en pantallas extra-grandes o más grandes</p>

<h4>Texto dentro de su contenedor</h4>

<!--Puedo tener un texto grande y probablemente este se podría salir del contenedor entonces
    usamos
-->
<div class="badge bg-primary" style="width: 6rem">
    Este texto si se sale de su contenedor
</div>

<hr />
<!--un badge es un contenedor donde podemos colocar cosas.-->
<!--Podemos hacer que el texto no se salga, utilizando text.wrap-->

<div class="badge text-wrap bg-primary" style="width: 6rem">
    Este texto no se sale de su contenedor
</div>

<hr />

<!--También podemos tener un texto muy largo pero sin espacios, y esto lo podemos
    tratar de esta manera
-->

<div class="badge bg-primary text-wrap text-break" style="width: 6rem">
    ffffffffffffffffffffffffffffffffffffffffffffffff
</div>

<!--En este caso utilizamos text-break adicional al text-wrap, ya que aun que
    estamos diciendo que queremos envolver todo el texto en un badge, pero este
    caso es especial ya que no tiene espacios entonces con text-break podemos 
    hacer que el badge lo pueda contener
-->

<hr />

<h4>Transformando texto</h4>

<p class="text-lowercase">Minúsculas</p>
<p class="text-uppercase">Mayúsculas</p>
<p class="text-capitalize">cada palabra con mayúscula</p>

<hr />

<h4>Tamaño de texto</h4>

<p class="fs-1">.fs-1</p>
<p class="fs-2">.fs-2</p>
<p class="fs-3">.fs-3</p>
<p class="fs-4">.fs-4</p>
<p class="fs-5">.fs-5</p>
<p class="fs-6">.fs-6</p>

<hr />

<h4>Estilo del texto</h4>

<p class="fw-bold">Negrita</p>
<p class="fw-bolder">Más negrita</p>
<p class="fw-normal">Normal</p>

<p class="fw-light">Text light.</p>
<p class="fw-lighter">Más light.</p>
<p class="fst-italic">Cursiva.</p>

<p class="text-decoration-underline">Subrayado.</p>
<p class="text-decoration-line-through">Línea a través del texto.</p>

<a href="#" class="">Enlace con decoración</a>
<br />
<a href="#" class="text-decoration-none">Enlace sin decoración</a>



<h3>11.- Formularios</h3>

<h4>Formulario Normal</h4>

<form> <!--Contenemos todo en form-->
    <div class="mb-3"> <!--luego en un div pondremos un margin bottom de 3 para separa el entre elementos que continúe debajo del input-->
        <label class="form-label">Email</label>
        <input type="email" class="form-control"/> <!--form-control le da estilo al input, lo hace más grande-->
    </div>

    <!--Textarea para colocar comentarioss-->

    <div class="mb-3">
           <label class="form-label">Descripción</label>
           <textarea type="email" class="form-control" rows="4"></textarea>
    </div>

    <!--un select nos da un menú desplegable, por lo que siempre seguido de ello, deben venir
        las opciones donde contendrán sus valores y por supuesto la leyenda que necesitemos colocar.
    -->
    <div class="mb-3">
        <label class="form-label">Color Favorito</label>
           <select class="form-select">
               <option value="1">Azul</option>
               <option value="2">Rojo</option>
               <option value="3">Verde</option>
           </select>
    </div>

    <!--este es el formato de los checkbox dentro de bootstrap-->
    <div class="mb-3">
        <label class="form-label">Selecciona una o las opciones que corresponda</label>
        <div class="form-check">
            <input class="form-check-input" type="checkbox"/>
            <label class="form-label">Es empleado full time</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" />
            <label class="form-label">Es empleado</label>
        </div>
    </div>

    <!--Otra forma para que el checkbox quede marcado predeterminadamente, se le agrega un 
        Checked dentro del input, seguido del type
    -->
    <div class="mb-3">
        <label class="form-label">Selecciona una o las opciones que corresponda</label>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" checked/>
            <label class="form-label">Es empleado full time</label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" checked/>
            <label class="form-label">Es empleado</label>
        </div>
    </div>



    <!--este es el formato de los radio dentro de bootstrap-->

    <div class="mb-3">
        <label class="form-label">Selecciona una opción</label>
        <div class="form-check">
            <input type="radio" class="form-check-input" name="miradio"/>
            <label>Opción 1</label>
        </div>
        <div class="form-check">
            <input type="radio" class="form-check-input" name="miradio"/>
            <label>Opción 2</label>
        </div>
    </div>

    <!--Label flotante, el label queda dentro del espacio donde escribir lo solicitado
        y además se ve con un color claro-->
    <div class="mb-3">
        <div class="form-floating mb-33">
            <input type="email" class="form-control" />
            <label>Email</label>
        </div>
    </div>


    <!--y para que quede el label al centro y no sólamente arriba
        del área de texto, por ejemplo que quede centrado y una vez que uno escriba se ponga automáticamente
        arriba se debe asociar el label con el input de la siguiente manera con un placeholder
    -->
    <div class="mb-3">
        <div class="form-floating mb-33">
            <input type="email" class="form-control" placeholder="Email"/>
            <label>Email</label>
        </div>
    </div>

    <!--Para deshabilitar un input o bien en este caso una opción podemos hacerlo mediante
        este ejemplo
    -->

    <div class="mb-3">
        <label class="form-label">Email</label>
        <input type="email" class="form-control" disabled/>
    </div>

    <!--Además existen otros controles donde se puede asociar un color si queremos que sea negro
        sólo debemos llegar en el input hasta form-control-valor, y para agregar colores
        debemos continuar con la propiedad value="" y colocar un color héxadecima´l, áun así con la opción
        y con la siguiete sintáxis, aparecerá un cuadro de color y al seleccionarlo,
        abrirá una opción para modificar el color deseado en rgb, Hexadecimal Hsl.
    -->
    <div class="mb-3">
        <label>Color de la camisa</label>
        <input type="color" class="form-control form-control-color" value="#563d7c"/>
    </div>

    <div class="mb-3">
        <div class="btn btn-primary">
            Enviar
        </div>
        <div class="btn btn-secondary">
            Cancelar
        </div>
    </div>

</form>

<!--Por otro lado, podemos tener un formulario confeccionado en columnas
    en donde colocaremos un elementro al costado del otro como hemos venido aprendiendo
    y hacer las modificaciones que desees, aún así en este ejemplo, aparecerán e columnas en una fila
    Nombre, Apellido y Enviar.
-->

<h4>Formulario con columnas</h4>

    <div class="row">
        <div class="col">
            <input type="text" class="form-control" placeholder="Primer nombre"/>
        </div>
        <div class="col">
            <input type="text" class="form-control" placeholder="Primer apellido"/>
        </div>
        <div class="col">
            <button class="btn btn-primary">Enviar</button>
        </div>
    </div>


    <hr />


    <h3>12.- Acordeón</h3>

    <!--El acordéon es un componente que podemos usar en nuestras apliaciones el cual
        nos permite tener secciones desplegables
    -->
    <!-- para crear un acordeón, primero debemos definir un div con lase accordion,
        luego colocamos otro div dentro del elemento padre con clase accordion-item,
        y dento del mismo elemento podemos colocar un <h2> con la clase accordion-header, 
        para identificar desde donde nace el acorderón, dentro del h2 colocaremos un botón,
        luego a botón le asignamos la clase accordion-button
        para activar el acordeón y además cuando uno se posicione sobre este, se comporta
        con las características de un botón.
        luego voy a colocar lo que yo quiero que salga al desplegar este elemento del acordeón
    -->
<div class="accordion" id="ejemploAcordeon">
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button 
                data-bs-toggle="collapse" data-bs-target="#elemento1acordeon"
                class="accordion-button">¿Can you able to put your dreams in God?</button>
        </h2>

        <!--Entonces seguido del texto anterior, colcoamos un div y dentro de este colocamos
            las clases accordion-collápse collapse show.(show es opcional pero al colocarla,
            nos mostrará lo que queramos visualizar al desplegar el acorderón)
            Luego seguido de esto, debemos vincular el elemento desplegado con el elemento padre 
            del acordeón, que es de donde este nace. y donde bootstrap nos permite colocar informaciones
            específicas para su funcionalidad, entonces procedemos a colocar data-bs-parent="" y en este espacio ""
            debemos vincular el elemento hijo con su padre mediante un id="".
            de este modo vuelvo al elemento padre para determinar un id y lo llamaremos id="ejemploAcordeon"
            posteriormente escribiremos en el eemento hijo, en data-bs-parent="#ejemploAcordeon" y colocamos el signo Gato
            que es un selector de id para poder llamarlo.
        -->
        <div id ="elemento1acordeon"class="accordion-collapse collapse show" 
        data-bs-parent="#ejemploAcordeon">
        <!--Luego seguido de lo anteior, podemos comenzar a escribir el cuerpo del acordeón, escribiendo
            otro div con clase accordion-body y seguido de este colocar el contenido propiamente tal sin ninguna etiqueta.
        -->
           <div class="accordion-body">
                Of course yes, is the best way to follow them, God is incredible and amazing.
                Nothing would be possible without him and his sopport with us.
            </div>
        </div>

        <!-- una vez teniendo todo esto, ya tenemos nuestros elementos listos pero aún el elemento hijo no nace
            desde el elemento padre al hacer click sobre el, y para esto pusimos el botón.
            Para activar la funcionalidad del botón, colocamos un id dentro del div del elemento hijo, donde anteriormente
            vinculamos con el elemento padre en parte del principio, al lado de la etiqueta div.
            luego creamos el id que en este ejemplo sería id="elemento1acorderon".
            posteriormente entro de la etiqueta button, colocamos la propiedad de data-bs-toggle="" colocamos el valor de collapse
            quedando data-bs-toggle="colapse" para que pueda colapsar y desplegar algo seguido de la propiedad
            data-bs-target="" que es donde vincularemos el botón con el elemento hijo quedando
            data-bs-target="#elemento1acordeon". entonces lo que estamos haciendo
            es decirle al botón que al hacer click, este colapse y se despliegue al elemento hijo.

        -->
    </div>
        <div class="accordion-item">
        <h2 class="accordion-header">
            <button 
                data-bs-toggle="collapse" data-bs-target="#elemento2acordeon"
                class="accordion-button">Elemento 2</button>
        </h2>
        <div id ="elemento2acordeon"class="accordion-collapse collapse" 
        data-bs-parent="#ejemploAcordeon">
            <div class="accordion-body">
                Este es el contenido del segundo elemento. 
            </div>
        </div>
    </div>
</div>

<hr />

        <!--Luego para poder poner otro acordeón, nos tomamos del lo que ya hicimos para hacer otro
            pero debemos cambiar los id del elemento hijo que vincula con el elemento padre.
        -->

<h3>11.- Alertas</h3>

<!--Otro componente que nos da bootstrap son las alertas-->

<div class="alert alert-primary" role="alert">
  A simple primary alert—check it out!
</div>
<div class="alert alert-secondary" role="alert">
  A simple secondary alert—check it out!
</div>
<div class="alert alert-success" role="alert">
  A simple success alert—check it out!
</div>
<div class="alert alert-danger" role="alert">
  A simple danger alert—check it out!
</div>
<div class="alert alert-warning" role="alert">
  A simple warning alert—check it out!
</div>
<div class="alert alert-info" role="alert">
  A simple info alert—check it out!
</div>
<div class="alert alert-light" role="alert">
  A simple light alert—check it out!
</div>
<div class="alert alert-dark" role="alert">
  A simple dark alert—check it out!
</div>

<<hr />

  <!--Vamos a crear una pequeña interfaz de usurario en donde haremos un botón-->


<button onclick="mostrarAlertaExitoso()">Mostrar una alerta exitoso</button>
<button onclick="mostrarAlertaError()">Mostrar una alerta de error</button>

<div>
    Las alertas se van a mostrar aquí
</div>

<div id="contenedor-alertas">

</div>

@section Scripts{
    <script>
        function mostrarAlertaExitoso(){
            mostrarAlerta('Este es un mensaje exitoso', 'success');
        }

        function mostrarAlertaError() {
            mostrarAlerta('Este es un mensaje de error', 'danger');
        }

        function mostrarAlerta(mensaje, tipo){
            const alerta = document.createElement('div');
            alerta.innerHTML = `<div class="alert alert-${tipo}" role="alert">
                                   ${mensaje}
                                </div>`;
            const contenedorAlertas = document.getElementById('contenedor-alertas');
            contenedorAlertas.append(alerta)
        }
    </script>
}`

<hr />

<div id="liveAlertPlaceholder"></div>

<button type="button" class="btn btn-primary" id="liveAlertBtn">Show live alert</button>

    <script>
        var alertPlaceholder = document.getElementById('liveAlertPlaceholder')
        var alertTrigger = document.getElementById('liveAlertBtn')

        function alert(message, type) {
        var wrapper = document.createElement('div')
        wrapper.innerHTML = '<div class="alert alert-' + type + ' alert-dismissible" role="alert">' + message + '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>'

        alertPlaceholder.append(wrapper)
        }
            
        if (alertTrigger) {
        alertTrigger.addEventListener('click', function () {
            alert('Nice, you triggered this alert message!', 'success')
        })
        }
    </script>


    <hr />

    <h3>12.Carrusel</h3>

    <!--Este me permitirá tener una secuencia de imágenes-->

   <div id="carouselEjemplo" class="carousel slide" data-bs-ride="carousel">
       <div class="carousel-inner">
           <div class="carousel-item active">
            <img src="https://m.media-amazon.com/images/M/MV5BNjg1MDQ5MjQ2N15BMl5BanBnXkFtZTYwNjI5NjA3._V1_.jpg" class="d-block w-100" />
           </div>
           <div class="carousel-item">
            <img src="https://m.media-amazon.com/images/M/MV5BNjg1MDQ5MjQ2N15BMl5BanBnXkFtZTYwNjI5NjA3._V1_.jpg" class="d-block w-100" />
           </div>
           <div class="carousel-item">
            <img src="https://m.media-amazon.com/images/M/MV5BNjg1MDQ5MjQ2N15BMl5BanBnXkFtZTYwNjI5NjA3._V1_.jpg" class="d-block w-100" />
           </div>
       </div>

       <div class="carousel-indicators">
            <button type="button" data-bs-target="#carouselEjemplo" data-bs-slide-to="0" class="active"></button>
            <button type="button" data-bs-target="#carouselEjemplo" data-bs-slide-to="1"></button>
            <button type="button" data-bs-target="#carouselEjemplo" data-bs-slide-to="2"></button>
       </div>

    <button class="carousel-control-prev" type="button" data-bs-target="#carouselEjemplo"data-bs-slide="prev">
        <span class="carousel-control-prev-icon"></span>
    </button>

   <button class="carousel-control-next" type="button" data-bs-target="#carouselEjemplo"data-bs-slide="next">
        <span class="carousel-control-next-icon"></span>
    </button>

   </div>


   <hr />


<h3>13.Ventana Modal</h3>

<!--Boton abre modal-->
<button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#ejemploModal">
    Abrir Modal
</button>


<div class="modal fase" id="ejemploModal" tableindex="-1">
       <div class="modal-dialog">
           <div class="modal-content">
               <div class="modal-header">
                   <h5 class="modal-title">Título del modal</h5>
                   <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
               </div>
               <div class="modal-body">
                    <p>Este es un pequeño formulario</p>
                    <form>
                        <div class="mb-3">
                            <label class="form-label">nombre</label>
                            <input type="text" class="form-control"/>
                        </div>
                    </form>
               </div>
               <div class="modal-footer">
                   <button class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                   <button class="btn btn-primary" data-bs-dismiss="modal">Salvar Cambios</button>
               </div>
           </div>
       </div>
</div>

<hr />


<h3>14.Tabs</h3>


<!--Primero hay que colocar los tabs en este caso en listas-->
<ul class="nav nav-tabs justify-content-center">
    <li class="nav-item">
        <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#tab1">
            Tab 1
        </button>
    </li>
    <li>
        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab2">
            Tab 2
        </button>
    </li>
</ul>

<!--Luego se deben colocar el contenido y asignarle un id, para 
    vincularlo con el tab
-->

<div class="tab-content">
    <div class="tab-pane fade show active" id="tab1">
        Buenos días
    </div>
    <div class="tab-pane fade" id="tab2">
        Buenas noches
    </div>
</div>
<!--Cabe señalar que las clases show y active sólo deben asignarse una sola vez
    ya que después se asginan automáticamente.
-->

<hr />

<h3>15.Menu lateral con OffCanvas</h3>

<!--existe un componente que nos permite tener un menu lateral desplegable
    lo podemos mostrar y ocultar a nuestro anojo
-->


<!--En este caso, podemos crar un botón que abra el contenido que nosotros deseamos-->
<button class="btn btn-primary" data-bs-toggle="offcanvas" data-bs-target="#ejemploOffcanvas">
    Abrir offcanvas
</button>

<!--Luego colocamos el contenido necesario con su respectivo id para vincular al botón.-->

<div class="offcanvas offcanvas-start" tabindex="-1" id="ejemploOffcanvas">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title">Mi aplicación</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas"></button>
    </div>
    <div class="offcanvas-body">
        <div>
            Un texto de ejemplo
        </div>
    </div>
</div>


<hr />

<h3>16.Mostrando Toast</h3>

<!--Los toast son pequeños mensajes que aparecen en la pantalla, por ejemplo
    cuando el usuario hace una acción correcta se puede mostrar un mensaje
    en la parte inferior derecha de la pantalla o bien si ocurrió un error
-->

<!--Primero creamos el botón y le indicaremos qué hacer cuando el usuario haga un click-->
<button type="button" class="btn btn-primary" onclick="mostrarToast()">Mostrat toast</button>

<!--Luego creamos el html del toast en si, es decir lo que se le mostrará al usuario-->

<!--Primero colocamos la clase position-fixed para fijar la posición y luego en qué parte?
    en la parte inferior derecha con botton-0 para ubicarla totalmente hacia abajo y
    end-0 para colocarlo a la derecha, entonces quedará abajo y a la derecha
    por último podemos colocar un padding de 3 p-3-->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="miToast" class="toast">
        <!--En esta parte se crea el cuerpo de la ventana emergente-->
        <div class="toast-header">
            <strong class="me-auto">Mensaje enviado</strong> <!--"me" es margen derecho-->
            <small>Hace unos instantes</small>
            <button class="btn-close" data-bs-dismiss="toast"></button>
        </div>
        <div class="toast-body">
            El mensaje fue enviado a Claudia.
        </div>
    </div>
</div>

    <!--Ahora debemos continuar con el javascript para realemente mostrar el toast-->

    <script>
        function mostrarToast(){
            var ejemploToast = document.getElementById('miToast');
            var toast = new bootstrap.Toast(ejemploToast);
            toast.show();
        }
    </script>
